{"version":3,"file":"recorder.mjs","sources":["../recorder.js"],"sourcesContent":["class Recorder {\n  constructor(options = {}) {\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    // this.onStop = this.onStop.bind(this);\n    this.addListeners = this.addListeners.bind(this);\n    this.handleAudioChunks = this.handleAudioChunks.bind(this);\n    this.flush = this.flush.bind(this);\n    this.audioChunks = [];\n    this.mediaRecorder = null;\n    return navigator.mediaDevices\n      .getUserMedia({ audio: true })\n      .then(stream => {\n        this.mediaRecorder = new MediaRecorder(stream);\n        this.addListeners();\n        return this;\n      })\n      .catch(err => {\n        console.log(err.message);\n      });\n\n  }\n\n  // onStop(evt) {}\n\n  addListeners() {\n    this.mediaRecorder.addEventListener(\n      'dataavailable',\n      this.handleAudioChunks\n    );\n  }\n  handleAudioChunks(event) {\n    this.audioChunks.push(event.data);\n  }\n\n  start() {\n    if (!this.mediaRecorder) {\n        console.warn('No media recorder. call new Recorder');\n        return false;\n    }\n    this.flush();\n    this.mediaRecorder.start();\n  }\n\n  flush() {\n    this.audioBlob = null;\n    this.audioUrl = null;\n    this.audio = null;\n    this.mediaRecorder = null;\n    this.audioChunks = [];\n  }\n\n  stop() {\n    return new Promise((resolve, reject) => {\n      if (!this.mediaRecorder) reject('No media recorder. call new Recorder');\n      this.mediaRecorder.addEventListener('stop', () => {\n        this.audioBlob = new Blob(this.audioChunks);\n        this.audioUrl = URL.createObjectURL(this.audioBlob);\n        this.audio = new Audio(this.audioUrl);\n        resolve({ audioBlob: this.audioBlob, audioUrl: this.audioUrl, audio: this.audio });\n      });\n\n      this.mediaRecorder.stop();\n    });\n  }\n}\nexport default Recorder"],"names":["Recorder","constructor","options","start","this","bind","stop","addListeners","handleAudioChunks","flush","audioChunks","mediaRecorder","navigator","mediaDevices","getUserMedia","then","stream","MediaRecorder","catch","err","log","message","addEventListener","event","push","data","console","warn","audioBlob","audioUrl","audio","Promise","resolve","reject","Blob","URL","createObjectURL","Audio"],"mappings":"AAAA,IAAMA,EACJC,SAAYC,oCAAU,SACfC,MAAQC,KAAKD,MAAME,KAAKD,WACxBE,KAAOF,KAAKE,KAAKD,KAAKD,WAEtBG,aAAeH,KAAKG,aAAaF,KAAKD,WACtCI,kBAAoBJ,KAAKI,kBAAkBH,KAAKD,WAChDK,MAAQL,KAAKK,MAAMJ,KAAKD,WACxBM,YAAc,QACdC,cAAgB,KACdC,UAAUC,aACdC,aAAa,QAAS,IACtBC,cAAKC,YACCL,cAAgB,IAAIM,cAAcD,KAClCT,eACEH,IAERc,eAAMC,WACGC,IAAID,EAAIE,YAOtBd,YAAAA,6BACOI,cAAcW,iBACjB,gBACAlB,KAAKI,oBAGTA,YAAAA,2BAAkBe,QACXb,YAAYc,KAAKD,EAAME,OAG9BtB,YAAAA,qBACOC,KAAKO,qBACNe,QAAQC,KAAK,yCACN,OAENlB,aACAE,cAAcR,SAGrBM,YAAAA,sBACOmB,UAAY,UACZC,SAAW,UACXC,MAAQ,UACRnB,cAAgB,UAChBD,YAAc,IAGrBJ,YAAAA,kCACS,IAAIyB,iBAASC,EAASC,GACtB7B,EAAKO,eAAesB,EAAO,0CAC3BtB,cAAcW,iBAAiB,oBAC7BM,UAAY,IAAIM,KAAK9B,EAAKM,eAC1BmB,SAAWM,IAAIC,gBAAgBhC,EAAKwB,aACpCE,MAAQ,IAAIO,MAAMjC,EAAKyB,UAC5BG,EAAQ,CAAEJ,UAAWxB,EAAKwB,UAAWC,SAAUzB,EAAKyB,SAAUC,MAAO1B,EAAK0B,YAGvEnB,cAAcL"}