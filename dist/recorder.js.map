{"version":3,"file":"recorder.js","sources":["../recorder.js"],"sourcesContent":["class Recorder {\n  constructor(options = {}) {\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.addListeners = this.addListeners.bind(this);\n    this.handleAudioChunks = this.handleAudioChunks.bind(this);\n    this.dispose = this.dispose.bind(this);\n    this.init = this.init.bind(this);\n    this.state = this.state.bind(this);\n\n    this.audioChunks = [];\n    this.mediaRecorder = null;\n\n  }\n\n  init() {\n    return navigator.mediaDevices\n      .getUserMedia({ audio: true })\n      .then(stream => {\n        this.mediaRecorder = new MediaRecorder(stream);\n        this.addListeners();\n        return this.mediaRecorder;\n      })\n      .catch(err => {\n        console.log(err.message);\n      });\n  }\n\n  onStart() {\n\n  }\n\n  onStop() {\n\n  }\n\n  onPause() {\n\n  }\n\n  onResume() {\n\n  }\n  \n  addListeners() {\n    this.mediaRecorder.addEventListener('dataavailable', this.handleAudioChunks);\n    /*this.mediaRecorder.addEventListener('start', this.onStart);\n    this.mediaRecorder.addEventListener('stop', this.onStop);\n    this.mediaRecorder.addEventListener('pause', this.onPause);\n    this.mediaRecorder.addEventListener('resume', this.onResume);*/\n  }\n\n  handleAudioChunks(event) {\n    this.audioChunks.push(event.data);\n  }\n\n  start() {\n    this.audioChunks = [];\n    this.mediaRecorder.start();\n  }\n\n  state() {\n    return this.mediaRecorder.state;\n  }\n\n  dispose() {\n    this.audioBlob = null;\n    // URL.revokeObjectURL(this.audioUrl);\n    this.audioUrl = null;\n    this.audio = null;\n    this.mediaRecorder = null;\n    this.audioChunks = [];\n    this.init = null;\n  }\n\n  stop() {\n    return new Promise((resolve, reject) => {\n      this.mediaRecorder.addEventListener('stop', () => {\n          const audioBlob = new Blob(this.audioChunks);\n          const audioUrl = window.URL.createObjectURL(audioBlob);\n          const audio = new Audio(audioUrl);\n          const result = { audioBlob, audioUrl, audio };\n          resolve(result);\n      });\n      this.mediaRecorder.stop();\n    });\n  }\n}\nexport default Recorder"],"names":["Recorder","constructor","options","start","this","bind","stop","addListeners","handleAudioChunks","dispose","init","state","audioChunks","mediaRecorder","navigator","mediaDevices","getUserMedia","then","stream","MediaRecorder","catch","err","log","message","onStart","onStop","onPause","onResume","addEventListener","event","push","data","audioBlob","audioUrl","audio","Promise","resolve","reject","Blob","window","URL","createObjectURL","Audio"],"mappings":"AAAA,IAAMA,EACJC,SAAYC,kBAAU,SACfC,MAAQC,KAAKD,MAAME,KAAKD,WACxBE,KAAOF,KAAKE,KAAKD,KAAKD,WACtBG,aAAeH,KAAKG,aAAaF,KAAKD,WACtCI,kBAAoBJ,KAAKI,kBAAkBH,KAAKD,WAChDK,QAAUL,KAAKK,QAAQJ,KAAKD,WAC5BM,KAAON,KAAKM,KAAKL,KAAKD,WACtBO,MAAQP,KAAKO,MAAMN,KAAKD,WAExBQ,YAAc,QACdC,cAAgB,MAIvBH,YAAAA,kCACSI,UAAUC,aACdC,aAAa,QAAS,IACtBC,cAAKC,YACCL,cAAgB,IAAIM,cAAcD,KAClCX,eACEH,EAAKS,gBAEbO,eAAMC,WACGC,IAAID,EAAIE,YAItBC,YAAAA,qBAIAC,YAAAA,oBAIAC,YAAAA,qBAIAC,YAAAA,sBAIApB,YAAAA,6BACOM,cAAce,iBAAiB,gBAAiBxB,KAAKI,oBAO5DA,YAAAA,2BAAkBqB,QACXjB,YAAYkB,KAAKD,EAAME,OAG9B5B,YAAAA,sBACOS,YAAc,QACdC,cAAcV,SAGrBQ,YAAAA,wBACSP,KAAKS,cAAcF,OAG5BF,YAAAA,wBACOuB,UAAY,UAEZC,SAAW,UACXC,MAAQ,UACRrB,cAAgB,UAChBD,YAAc,QACdF,KAAO,MAGdJ,YAAAA,kCACS,IAAI6B,iBAASC,EAASC,KACtBxB,cAAce,iBAAiB,sBAC1BI,EAAY,IAAIM,KAAKlC,EAAKQ,aAC1BqB,EAAWM,OAAOC,IAAIC,gBAAgBT,GACtCE,EAAQ,IAAIQ,MAAMT,GAExBG,EADe,WAAEJ,WAAWC,QAAUC,QAGrCrB,cAAcP"}